#ifndef ALGORITHMCORE_H
#define ALGORITHMCORE_H

#include <QMutex>
#include <QSemaphore>
#include <QVector>
#include <QObject>
#include <QThread>
#include <QEvent>
#include <QList>
#include <QCoreApplication>

#include "audioManager.h"
#include "parametersManager.h"

#include "sourceEvents.h"

#ifdef __cplusplus
extern "C" {
#endif

//#include "ManyEars/beamformer.h"
//#include "ManyEars/compensator.h"
//#include "ManyEars/mixture.h"
#include "overallContext.h"

#ifdef __cplusplus
}
#endif
//
//// XxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxX
//// x                                                           x
//// x Algorithm Core Sources Objects                            x
//// x                                                           x
//// XxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxX
//
//// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//// % Potential Source                                          %
//// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//
//class PotentialSource
//{
//
//public:
//
//    /***********************************************************
//    * Constructor                                              *
//    ***********************************************************/
//
//    PotentialSource(float _X, float _Y, float _Z, float _E, int _index);
//    PotentialSource(const PotentialSource& _potentialSource);
//    PotentialSource();
//
//    /***********************************************************
//    * Destructor                                               *
//    ***********************************************************/
//
//    ~PotentialSource();
//
//    /***********************************************************
//    * Operators                                                *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | Equal                                                 |
//    // +-------------------------------------------------------+
//
//    PotentialSource& operator=(const PotentialSource& _potentialSource);
//
//    /***********************************************************
//    * Accessors                                                *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | X                                                     |
//    // +-------------------------------------------------------+
//
//    float getX() const;
//
//    // +-------------------------------------------------------+
//    // | Y                                                     |
//    // +-------------------------------------------------------+
//
//    float getY() const;
//
//    // +-------------------------------------------------------+
//    // | Z                                                     |
//    // +-------------------------------------------------------+
//
//    float getZ() const;
//
//    // +-------------------------------------------------------+
//    // | E                                                     |
//    // +-------------------------------------------------------+
//
//    float getE() const;
//
//    // +-------------------------------------------------------+
//    // | Index                                                 |
//    // +-------------------------------------------------------+
//
//    int getIndex() const;
//
//    /***********************************************************
//    * Mutator                                                  *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | X                                                     |
//    // +-------------------------------------------------------+
//
//    void setX(float _X);
//
//    // +-------------------------------------------------------+
//    // | Y                                                     |
//    // +-------------------------------------------------------+
//
//    void setY(float _Y);
//
//    // +-------------------------------------------------------+
//    // | Z                                                     |
//    // +-------------------------------------------------------+
//
//    void setZ(float _Z);
//
//    // +-------------------------------------------------------+
//    // | E                                                     |
//    // +-------------------------------------------------------+
//
//    void setE(float _E);
//
//    // +-------------------------------------------------------+
//    // | Index                                                 |
//    // +-------------------------------------------------------+
//
//    void setIndex(int _index);
//
//    /***********************************************************
//    * Fields                                                   *
//    ***********************************************************/
//
//    float X;
//    float Y;
//    float Z;
//    float E;
//    int index;
//
//};
//
//// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//// % Tracked Source                                            %
//// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//
//class TrackedSource
//{
//
//public:
//
//    /***********************************************************
//    * Constructor                                              *
//    ***********************************************************/
//
//    TrackedSource(float _X, float _Y, float _Z, int _ID);
//    TrackedSource(const TrackedSource& _trackedSource);
//    TrackedSource();
//
//    /***********************************************************
//    * Destructor                                               *
//    ***********************************************************/
//
//    ~TrackedSource();
//
//    /***********************************************************
//    * Operators                                                *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | Equal                                                 |
//    // +-------------------------------------------------------+
//
//    TrackedSource& operator=(const TrackedSource& _trackedSource);
//
//    /***********************************************************
//    * Accessors                                                *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | X                                                     |
//    // +-------------------------------------------------------+
//
//    float getX() const;
//
//    // +-------------------------------------------------------+
//    // | Y                                                     |
//    // +-------------------------------------------------------+
//
//    float getY() const;
//
//    // +-------------------------------------------------------+
//    // | Z                                                     |
//    // +-------------------------------------------------------+
//
//    float getZ() const;
//
//    // +-------------------------------------------------------+
//    // | ID                                                    |
//    // +-------------------------------------------------------+
//
//    int getID() const;
//
//    /***********************************************************
//    * Mutator                                                  *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | X                                                     |
//    // +-------------------------------------------------------+
//
//    void setX(float _X);
//
//    // +-------------------------------------------------------+
//    // | Y                                                     |
//    // +-------------------------------------------------------+
//
//    void setY(float _Y);
//
//    // +-------------------------------------------------------+
//    // | Z                                                     |
//    // +-------------------------------------------------------+
//
//    void setZ(float _Z);
//
//    // +-------------------------------------------------------+
//    // | ID                                                    |
//    // +-------------------------------------------------------+
//
//    void setID(int _ID);
//
//    /***********************************************************
//    * Fields                                                   *
//    ***********************************************************/
//
//    float X;
//    float Y;
//    float Z;
//    int ID;
//
//};
//
//// XxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxX
//// x                                                           x
//// x Algorithm Core Sources Events                             x
//// x                                                           x
//// XxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxX
//
//// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//// % Potential source                                          %
//// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//
//class PotentialSourceEvent: public QEvent
//{
//
//public:
//
//    /***********************************************************
//    * Constructor                                              *
//    ***********************************************************/
//
//    PotentialSourceEvent(QList<PotentialSource> _list);
//
//    PotentialSourceEvent();
//
//    PotentialSourceEvent(const PotentialSourceEvent &e);
//
//    /***********************************************************
//    * Destructor                                               *
//    ***********************************************************/
//
//    ~PotentialSourceEvent();
//
//    /***********************************************************
//    * Operators                                                *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | Equal                                                 |
//    // +-------------------------------------------------------+
//
//    PotentialSourceEvent& operator=(const PotentialSourceEvent& _potentialSourceEvent);
//
//    /***********************************************************
//    * Accessors                                                *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | PotentialSource                                       |
//    // +-------------------------------------------------------+
//
//    PotentialSource getPotentialSource(const int indexSource) const;
//
//    // +-------------------------------------------------------+
//    // | List                                                  |
//    // +-------------------------------------------------------+
//
//    QList<PotentialSource> getList() const;
//
//    // +-------------------------------------------------------+
//    // | Size                                                  |
//    // +-------------------------------------------------------+
//
//    int getListSize() const;
//
//    /***********************************************************
//    * Mutators                                                 *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | PotentialSource                                       |
//    // +-------------------------------------------------------+
//
//    void pushSource(PotentialSource _source);
//
//    /***********************************************************
//    * Fields                                                   *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | List of potential sources                             |
//    // +-------------------------------------------------------+
//
//    QList<PotentialSource> list;
//
//};
//
//// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//// % Tracked source                                            %
//// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//
//class TrackedSourceEvent: public QEvent
//{
//
//public:
//
//    /***********************************************************
//    * Constructor                                              *
//    ***********************************************************/
//
//    TrackedSourceEvent(QList<TrackedSource> _list);
//
//    TrackedSourceEvent();
//
//    TrackedSourceEvent(const TrackedSourceEvent &e);
//
//    /***********************************************************
//    * Destructor                                               *
//    ***********************************************************/
//
//    ~TrackedSourceEvent();
//
//    /***********************************************************
//    * Operators                                                *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | Equal                                                 |
//    // +-------------------------------------------------------+
//
//    TrackedSourceEvent& operator=(const TrackedSourceEvent& _trackedSourceEvent);
//
//    /***********************************************************
//    * Accessors                                                *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | PotentialSource                                       |
//    // +-------------------------------------------------------+
//
//    TrackedSource getTrackedSource(const int indexSource) const;
//
//    // +-------------------------------------------------------+
//    // | Size                                                  |
//    // +-------------------------------------------------------+
//
//    int getListSize() const;
//
//    /***********************************************************
//    * Mutators                                                 *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | PotentialSource                                       |
//    // +-------------------------------------------------------+
//
//    void pushSource(TrackedSource _source);
//
//    /***********************************************************
//    * Fields                                                   *
//    ***********************************************************/
//
//    // +-------------------------------------------------------+
//    // | List of potential sources                             |
//    // +-------------------------------------------------------+
//
//    QList<TrackedSource> list;
//
//};



// XxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxX
// x                                                       x
// x Algorithm Core                                        x
// x                                                       x
// XxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxX

class AlgorithmCore: public QThread
{

    Q_OBJECT

public:

    /***********************************************************
    * Constructor                                              *
    ***********************************************************/

    AlgorithmCore(const int _audioDeviceID);
    AlgorithmCore(const QString _filePath);

    /***********************************************************
    * Destructor                                               *
    ***********************************************************/

    ~AlgorithmCore();

    /***********************************************************
    * Thread control                                           *
    ***********************************************************/

    // +-------------------------------------------------------+
    // | Run function                                          |
    // +-------------------------------------------------------+

    virtual void run();

    // +-------------------------------------------------------+
    // | Start the thread                                      |
    // +-------------------------------------------------------+

    void startThread(ParametersManager _parametersManager);

    // +-------------------------------------------------------+
    // | Stop the thread                                       |
    // +-------------------------------------------------------+

    void stopThread();   

    // +-------------------------------------------------------+
    // | Post a new frame                                      |
    // +-------------------------------------------------------+

    void postFrame();

    // +-------------------------------------------------------+
    // | Register an object                                    |
    // +-------------------------------------------------------+

    void registerObjectPotential(QObject* _object);
    void registerObjectTracked(QObject* _object);
    void registerObjectEnergy(QObject* _object);
    void registerObjectConfirmStop(QObject* _object);

    /***********************************************************
    * Accessor                                                 *
    ***********************************************************/

    QString getFileName() const;

protected:

    /***********************************************************
    * Events                                                   *
    ***********************************************************/

    // +-------------------------------------------------------+
    // | General                                               |
    // +-------------------------------------------------------+

    bool event(QEvent* event);

private:

    /***********************************************************
    * Inner thread control                                     *
    ***********************************************************/

    // +-------------------------------------------------------+
    // | Return a boolean to tell if the thread is running     |
    // +-------------------------------------------------------+

    bool isRunning();

    // +-------------------------------------------------------+
    // | Set a boolean to tell if the thread is running        |
    // +-------------------------------------------------------+

    void setRunning(bool _isRunning);

    // +-------------------------------------------------------+
    // | Wait for a frame                                      |
    // +-------------------------------------------------------+

    void waitFrame();

    /***********************************************************
    * Computation steps                                        *
    ***********************************************************/

    // +-------------------------------------------------------+
    // | Initialize the system                                 |
    // +-------------------------------------------------------+

    void initSystem();

    // +-------------------------------------------------------+
    // | Load a new frame                                      |
    // +-------------------------------------------------------+

    void loadFrame();

    // +-------------------------------------------------------+
    // | Find potential sources                                |
    // +-------------------------------------------------------+

    void findPotentialSources();

    // +-------------------------------------------------------+
    // | Output potential sources                              |
    // +-------------------------------------------------------+

    void outputPotentialSources();

    // +-------------------------------------------------------+
    // | Find tracked sources                                  |
    // +-------------------------------------------------------+

    void findTrackedSources();

    // +-------------------------------------------------------+
    // | Output tracked sources                                |
    // +-------------------------------------------------------+

    void outputTrackedSources();

    // +-------------------------------------------------------+
    // | Terminate the system                                  |
    // +-------------------------------------------------------+

    void terminateSystem();

    /***********************************************************
    * Fields                                                   *
    ***********************************************************/

    // +-------------------------------------------------------+
    // | Semaphore                                             |
    // +-------------------------------------------------------+

        // +---------------------------------------------------+
        // | Indicates that a shared field is being accessed   |
        // +---------------------------------------------------+

        QMutex criticalSection;

        // +---------------------------------------------------+
        // | Indicates that a frame is ready to be processed   |
        // +---------------------------------------------------+

        QSemaphore frameIsReady;

        // +---------------------------------------------------+
        // | Confirms that the thread is stopped               |
        // +---------------------------------------------------+

        QSemaphore confirmStop;

    // +-------------------------------------------------------+
    // | Flags                                                 |
    // +-------------------------------------------------------+

        // +---------------------------------------------------+
        // | Indicates that the main thread is running         |
        // +---------------------------------------------------+

        bool flagIsRunning;

        // +---------------------------------------------------+
        // | Indicates that the main thread is asked to stop   |
        // +---------------------------------------------------+

        bool flagAskToStop;

        // +---------------------------------------------------+
        // | Record raw signals                                |
        // +---------------------------------------------------+

        bool recordRaw;

    // +-------------------------------------------------------+
    // | Algorithm context                                     |
    // +-------------------------------------------------------+

    struct objOverall algorithmContext;

    // +-------------------------------------------------------+
    // | Audio manager                                         |
    // +-------------------------------------------------------+

    AudioManager *audioManager;

    int audioDeviceID;

    QString fileName;

    // +-------------------------------------------------------+
    // | Results                                               |
    // +-------------------------------------------------------+

        // +---------------------------------------------------+
        // | Potential sources                                 |
        // +---------------------------------------------------+

        float* potentialX;
        float* potentialY;
        float* potentialZ;
        float* potentialE;

        int numberPotentialSources;

        // +---------------------------------------------------+
        // | Tracked sources                                   |
        // +---------------------------------------------------+

        float* trackedX;
        float* trackedY;
        float* trackedZ;
        float* trackedID;

        int numberTrackedSources;

    // +-------------------------------------------------------+
    // | Events                                                |
    // +-------------------------------------------------------+

    QList<QObject*> objectReceiverPotentialList;
    QList<QObject*> objectReceiverEnergyList;
    QList<QObject*> objectReceiverTrackedList;
    QList<QObject*> objectReceiverConfirmStopList;
    QList<QObject*> objectGraph3DToInitialize;
    void registerObjectConfirmStopClear();
    UpdateParametersEvent *pastEvent;
    bool needsRestart;

    // +-------------------------------------------------------+
    // | Parameters                                            |
    // +-------------------------------------------------------+

    ParametersManager currentParameters;

};

    /***********************************************************
    * Function called when buffer is ready                     *
    ***********************************************************/

    void bufferIsFull(void *objPtr);

// XxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxX
// x                                                           x
// x Algorithm Core Control Events                             x
// x                                                           x
// XxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxX

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// % Confirm the thread stopped                                %
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

class AlgorithmCoreConfirmStop: public QEvent
{

public:

    /***********************************************************
    * Constructor                                              *
    ***********************************************************/

    AlgorithmCoreConfirmStop();

    AlgorithmCoreConfirmStop(const AlgorithmCoreConfirmStop& _algorithmCoreConfirmStop);

    /***********************************************************
    * Destructor                                               *
    ***********************************************************/

    ~AlgorithmCoreConfirmStop();

    /***********************************************************
    * Operators                                                *
    ***********************************************************/

    // +-------------------------------------------------------+
    // | Equal                                                 |
    // +-------------------------------------------------------+

    AlgorithmCoreConfirmStop& operator=(const AlgorithmCoreConfirmStop& _algorithmCoreConfirmStop);

};

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// % Restart thread with stream at the beginning               %
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

class AlgorithmRestartEvent: public QEvent
{

public:

    /***********************************************************
    * Constructor                                              *
    ***********************************************************/

    AlgorithmRestartEvent();

    AlgorithmRestartEvent(const AlgorithmRestartEvent& _algorithmRestartEvent);

    /***********************************************************
    * Destructor                                               *
    ***********************************************************/

    ~AlgorithmRestartEvent();

    /***********************************************************
    * Operators                                                *
    ***********************************************************/

    // +-------------------------------------------------------+
    // | Equal                                                 |
    // +-------------------------------------------------------+

    AlgorithmRestartEvent& operator=(const AlgorithmRestartEvent& _algorithmRestartEvent);

};

#endif
